
// This file is auto-generated during the build process
// It contains the source code of all components for the code view panel

export const COMPONENT_CODE_MAP: Record<string, string> = {
  "src/components/travel-time-calculator/travel-time-calculator.tsx": "'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport NumberFlow from '@number-flow/react';\nimport { RangeSlider } from '@/components/range-slider';\nimport { TimeDisplay } from '@/components/time-display';\n\n// Common animation settings for NumberFlow components\nconst numberFlowAnimation = {\n  transformTiming: {\n    duration: 400,\n    easing: 'cubic-bezier(0.34, 1.56, 0.64, 1)'\n  },\n  opacityTiming: {\n    duration: 200,\n    easing: 'ease-out'\n  }\n};\n\nexport function TravelTimeCalculator() {\n  // Initialize with default values\n  const [travelTime, setTravelTime] = useState({ hours: 0, minutes: 0 });\n  const [sliderValues, setSliderValues] = useState([300, 60, 1.5]);\n  \n  // Create a ref to track previous slider values to ensure animations trigger\n  const prevSliderValues = useRef([300, 60, 1.5]);\n  \n  // Labels and unit displays for the sliders\n  const sliderLabels = [\n    { name: 'Distance (km)', unit: 'km' },\n    { name: 'Speed (kph)', unit: 'kph' },\n    { name: 'Traffic Factor', unit: 'x' }\n  ];\n\n  // Min, max, and step values for each slider\n  const sliderConfigs = [\n    { min: 0, max: 3000, step: 10 },     // Distance: 0-3000 km\n    { min: 40, max: 120, step: 5 },      // Speed: 40-120 kph\n    { min: 1, max: 4, step: 0.1 }        // Traffic Factor: 1-4 x\n  ];\n\n  // Calculate break time based on distance\n  const calculateBreakTime = (distance: number): number => {\n    if (distance < 150) return 0;\n    if (distance <= 500) return 0.25; // 15 minutes\n    if (distance <= 1000) return 0.5; // 30 minutes\n    return distance / 300; // roughly 10 min per 150 km\n  };\n\n  // Calculate travel time using T(d, s, f) = (d / s) × f + b\n  const calculateTravelTime = () => {\n    const distance = sliderValues[0];    // Distance in km\n    const speed = sliderValues[1];       // Speed in kph\n    const factor = sliderValues[2];      // Traffic factor\n    \n    // Calculate break time based on distance\n    const breakTime = calculateBreakTime(distance);\n    \n    // Formula: travel_time = (distance / speed) × factor + breakTime\n    const travelTimeHours = (distance / speed) * factor + breakTime;\n    \n    // Convert to hours and minutes\n    const hours = Math.floor(travelTimeHours);\n    const minutes = Math.round((travelTimeHours - hours) * 60);\n    \n    return { hours, minutes };\n  };\n\n  useEffect(() => {\n    setTravelTime(calculateTravelTime());\n    // Update the previous values after the calculation\n    prevSliderValues.current = [...sliderValues];\n  }, [sliderValues]);\n\n  const handleSliderChange = (index: number, value: number) => {\n    const newSliderValues = [...sliderValues];\n    newSliderValues[index] = value;\n    setSliderValues(newSliderValues);\n  };\n\n  return (\n    <div className=\"w-full max-w-[400px] rounded-3xl bg-zinc-50 p-8 border-zinc-100 border-1\">\n      <div className=\"mb-4 text-center\">\n        <div className=\"text-base text-zinc-500\">\n          Travel Time\n        </div>\n        \n        <TimeDisplay \n          hours={travelTime.hours} \n          minutes={travelTime.minutes}\n          yearMode={false}\n          singleValueMode={false} \n        />\n      </div>\n\n      <div className=\"space-y-6\">\n        {sliderValues.map((value, index) => (\n          <div key={index} className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <div className=\"text-sm text-zinc-500\">\n                {sliderLabels[index].name}\n              </div>\n              <div className=\"text-sm font-medium flex items-center\">\n                <div className=\"min-w-[50px] text-right\">\n                  <NumberFlow \n                    key={`slider-value-${index}`}\n                    value={value} \n                    willChange\n                    format={{ \n                      useGrouping: true, \n                      maximumFractionDigits: index === 2 ? 1 : 0 \n                    }}\n                    transformTiming={numberFlowAnimation.transformTiming}\n                    opacityTiming={numberFlowAnimation.opacityTiming}\n                  />\n                </div>\n                <span className=\"ml-1\">{sliderLabels[index].unit}</span>\n              </div>\n            </div>\n            \n            <RangeSlider\n              value={value}\n              onChange={(value) => handleSliderChange(index, value)}\n              min={sliderConfigs[index].min}\n              max={sliderConfigs[index].max}\n              step={sliderConfigs[index].step}\n              showLabels={false}\n              color=\"black\"\n            />\n          </div>\n        ))}\n        \n        <div className=\"mt-8 pt-8 border-t border-zinc-200 text-center\">\n          <div className=\"text-sm font-medium text-zinc-700\">Formula: T(d, s, f) = (d / s) × f + b</div>\n        </div>\n      </div>\n    </div>\n  );\n} ",
  "src/components/asset-counter-demo/asset-counter-demo.tsx": "'use client';\n\nimport React, { useState } from 'react';\nimport { AssetCounter } from '@/components/asset-counter';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nexport function AssetCounterDemo() {\n  const [currentAsset, setCurrentAsset] = useState(0);\n  const [favorites, setFavorites] = useState<number[]>([]);\n  const [trashed, setTrashed] = useState<number[]>([]);\n  const [selectedCollection, setSelectedCollection] = useState<string | null>(null);\n  const totalAssets = 5;\n  \n  const handleFavorite = (index: number) => {\n    setFavorites(prev => {\n      // Toggle favorite status\n      if (prev.includes(index)) {\n        return prev.filter(i => i !== index);\n      } else {\n        return [...prev, index];\n      }\n    });\n  };\n  \n  const handleTrash = (index: number) => {\n    setTrashed(prev => {\n      // Add to trash if not already there\n      if (!prev.includes(index)) {\n        return [...prev, index];\n      }\n      return prev;\n    });\n    \n    // Navigate to the next asset if available\n    if (trashed.length < totalAssets - 1) {\n      const nextIndex = (index + 1) % totalAssets;\n      setCurrentAsset(nextIndex);\n    }\n  };\n  \n  const handleDropdownSelect = (item: string) => {\n    setSelectedCollection(item);\n    \n    // Handle special actions based on dropdown selection\n    if (item === 'New Collection') {\n      // Here you would typically show a dialog to create a new collection\n      console.log('Creating a new collection...');\n    } else {\n      console.log(`Moving asset ${currentAsset + 1} to collection: ${item}`);\n    }\n  };\n  \n  // Animation variants for the notification\n  const notificationVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0 },\n    exit: { opacity: 0, y: -20 }\n  };\n  \n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-white\">\n      {/* Asset counter, positioned in the center */}\n      <div>\n        <AssetCounter \n          total={totalAssets}\n          initialIndex={currentAsset}\n          onIndexChange={setCurrentAsset}\n          onFavorite={handleFavorite}\n          onTrash={handleTrash}\n          onDropdown={handleDropdownSelect}\n          favorites={favorites}\n          trashed={trashed}\n        />\n      </div>\n      \n      {/* Notification for collection selection */}\n      <AnimatePresence>\n        {selectedCollection && (\n          <motion.div \n            className=\"mt-6 bg-white rounded-md shadow-lg border border-zinc-200 p-4 z-10\"\n            variants={notificationVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n            key={selectedCollection}\n          >\n            <p className=\"text-sm text-zinc-700\">\n              {selectedCollection === 'New Collection' \n                ? 'Creating a new collection...' \n                : `Asset ${currentAsset + 1} moved to ${selectedCollection}`\n              }\n            </p>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n} ",
  "src/components/text-reveal/text-reveal.tsx": "'use client';\n\nimport React, { useRef, useEffect } from 'react';\nimport { motion, useAnimation, useInView } from 'framer-motion';\n\ninterface TextRevealProps {\n  text: string;\n  className?: string;\n}\n\nexport function TextReveal({ text, className = '' }: TextRevealProps) {\n  const ref = useRef(null);\n  const isInView = useInView(ref, { once: true });\n  const controls = useAnimation();\n\n  useEffect(() => {\n    if (isInView) {\n      controls.start('visible');\n    }\n  }, [isInView, controls]);\n\n  const words = text.split(' ');\n\n  const container = {\n    hidden: { opacity: 0 },\n    visible: (i = 1) => ({\n      opacity: 1,\n      transition: { staggerChildren: 0.12, delayChildren: 0.04 * i },\n    }),\n  };\n\n  const child = {\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        type: 'spring',\n        damping: 12,\n        stiffness: 100,\n      },\n    },\n    hidden: {\n      opacity: 0,\n      y: 20,\n      transition: {\n        type: 'spring',\n        damping: 12,\n        stiffness: 100,\n      },\n    },\n  };\n\n  return (\n    <motion.div\n      ref={ref}\n      style={{ display: 'flex', overflow: 'hidden', flexWrap: 'wrap' }}\n      variants={container}\n      initial=\"hidden\"\n      animate={controls}\n      className={className}\n    >\n      {words.map((word, index) => (\n        <motion.span\n          key={index}\n          variants={child}\n          style={{ marginRight: '5px' }}\n          className=\"text-2xl font-medium text-zinc-800\"\n        >\n          {word}\n        </motion.span>\n      ))}\n    </motion.div>\n  );\n} ",
  "src/components/text-hover/text-hover.tsx": "'use client';\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { Poppins } from 'next/font/google';\n\n// Initialize the Poppins font with various weights\nconst poppins = Poppins({\n  weight: ['400', '500', '600', '700', '800'],\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-poppins',\n});\n\n// Define anime.js types\ninterface AnimeInstance {\n  (params: object): { [key: string]: unknown };\n}\n\n// Add TypeScript interface for window to recognize anime\ndeclare global {\n  interface Window {\n    anime: AnimeInstance;\n  }\n}\n\ninterface TextHoverProps {\n  text?: string;\n  className?: string;\n}\n\nexport function TextHover({ \n  text = \"Hover over me and move\",\n  className = '' \n}: TextHoverProps) {\n  const [isHovered, setIsHovered] = useState(false);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const textRef = useRef<HTMLDivElement>(null);\n  const animeRef = useRef<AnimeInstance | null>(null);\n  const lettersRef = useRef<HTMLSpanElement[]>([]);\n  \n  // Load anime.js\n  useEffect(() => {\n    const loadAnime = async () => {\n      try {\n        const script = document.createElement('script');\n        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js';\n        script.async = true;\n        script.onload = () => {\n          animeRef.current = window.anime;\n        };\n        document.head.appendChild(script);\n      } catch (error) {\n        console.error(\"Failed to load anime.js:\", error);\n      }\n    };\n    \n    loadAnime();\n    \n    return () => {\n      const scriptElement = document.querySelector('script[src*=\"anime.min.js\"]');\n      if (scriptElement && scriptElement.parentNode) {\n        scriptElement.parentNode.removeChild(scriptElement);\n      }\n    };\n  }, []);\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!textRef.current || !animeRef.current || lettersRef.current.length === 0) return;\n    \n    const textRect = textRef.current.getBoundingClientRect();\n    const mouseX = e.clientX - textRect.left;\n    const mouseY = e.clientY - textRect.top;\n    \n    setMousePosition({ x: mouseX, y: mouseY });\n    \n    // Animate each letter based on its distance from the mouse\n    lettersRef.current.forEach((letter) => {\n      if (!letter) return;\n      \n      const letterRect = letter.getBoundingClientRect();\n      const letterCenterX = letterRect.left + letterRect.width / 2 - textRect.left;\n      const letterCenterY = letterRect.top + letterRect.height / 2 - textRect.top;\n      \n      // Calculate distance from mouse to letter\n      const distanceX = mouseX - letterCenterX;\n      const distanceY = mouseY - letterCenterY;\n      const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);\n      \n      // Calculate how much to move the letter (closer mouse = more movement)\n      const movementFactor = Math.max(0, 1 - distance / 150);\n      const moveX = -distanceX * movementFactor * 0.2;\n      const moveY = -distanceY * movementFactor * 0.2;\n      \n      // Calculate rotation based on mouse position\n      const rotation = distanceX * 0.05 * movementFactor;\n      \n      // Scale effect\n      const scale = 1 + movementFactor * 0.3;\n      \n      // Font weight (400 = normal, 800 = bold)\n      // Interpolate between 400 and 800 based on movement factor\n      const fontWeight = 200 + Math.floor(movementFactor * 400);\n      \n      // Apply animation\n      animeRef.current?.({\n        targets: letter,\n        translateX: moveX,\n        translateY: moveY,\n        rotate: rotation,\n        scale: scale,\n        fontWeight: fontWeight,\n        easing: 'easeOutQuad',\n        duration: 100\n      });\n    });\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovered(false);\n    \n    // Reset all letters to their original position\n    if (animeRef.current && lettersRef.current.length > 0) {\n      animeRef.current({\n        targets: lettersRef.current,\n        translateX: 0,\n        translateY: 0,\n        rotate: 0,\n        scale: 1,\n        fontWeight: 200,\n        easing: 'easeOutExpo',\n        duration: 500\n      });\n    }\n  };\n\n  const handleMouseEnter = () => {\n    setIsHovered(true);\n  };\n\n  // Preprocess the text into letter spans\n  const letters = text.split('').map((letter, index) => (\n    <span \n      key={index}\n      ref={(el) => {\n        if (el && !lettersRef.current.includes(el)) {\n          // Use index to position the element in the array\n          lettersRef.current[index] = el;\n        }\n      }}\n      className=\"inline-block transition-transform origin-center text-zinc-800\"\n      style={{ \n        display: 'inline-block', \n        willChange: 'transform, font-weight',\n        fontWeight: 200\n      }}\n    >\n      {letter === ' ' ? '\\u00A0' : letter}\n    </span>\n  ));\n\n  return (\n    <div \n      ref={textRef}\n      className={`text-2xl text-center p-12 rounded-lg transition-all ${poppins.variable} font-sans relative cursor-default ${className}`}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onMouseMove={handleMouseMove}\n    >\n      {letters}\n    </div>\n  );\n} ",
  "src/components/dropdown/dropdown.tsx": "'use client';\n\nimport React, { useRef, useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Poppins } from 'next/font/google';\nimport { ChevronDown, User, Settings, HelpCircle, LogOut } from 'lucide-react';\n\n// Initialize the Poppins font\nconst poppins = Poppins({\n  weight: ['400', '500', '600'],\n  subsets: ['latin'],\n  display: 'swap',\n});\n\n// Default icon mapping\nconst defaultIcons: Record<string, React.ReactNode> = {\n  'Profile': <User size={16} />,\n  'Settings': <Settings size={16} />,\n  'Help': <HelpCircle size={16} />,\n  'Sign out': <LogOut size={16} />\n};\n\ninterface DropdownItem {\n  label: string;\n  icon?: React.ReactNode;\n}\n\ninterface DropdownProps {\n  items: (string | DropdownItem)[];\n  onItemSelect?: (item: string) => void;\n  buttonText?: string;\n  buttonIcon?: React.ReactNode;\n}\n\nexport function Dropdown({ \n  items, \n  onItemSelect = () => {}, \n  buttonText = \"Click\",\n  buttonIcon\n}: DropdownProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n\n  // Process items to ensure they all have a consistent format\n  const processedItems = items.map(item => {\n    if (typeof item === 'string') {\n      return {\n        label: item,\n        icon: defaultIcons[item] || null\n      };\n    }\n    return item;\n  });\n\n  return (\n    <div className=\"relative\">\n      <button\n        ref={buttonRef}\n        onClick={toggleDropdown}\n        className={`\n          pl-4 pr-3 py-2 rounded-lg bg-zinc-50 text-zinc-800 border border-zinc-200\n          hover:bg-zinc-100 transition-all duration-300 cursor-pointer\n          ${poppins.className} font-medium flex items-center justify-between\n        `}\n      >\n        <span>{buttonText}</span>\n        <motion.div\n          className=\"ml-2\"\n          initial={{ rotate: 0 }}\n          animate={{ rotate: isOpen ? 180 : 0 }}\n          transition={{ duration: 0.2 }}\n        >\n          {buttonIcon || <ChevronDown size={20} className=\"text-zinc-800\" />}\n        </motion.div>\n      </button>\n      \n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            ref={dropdownRef}\n            initial={{ \n              opacity: 0, \n              scale: 0.5,\n              transformOrigin: \"left top\"\n            }}\n            animate={{ \n              opacity: 1, \n              scale: 1,\n              transformOrigin: \"left top\"\n            }}\n            exit={{ \n              opacity: 0, \n              scale: 0.5,\n              transformOrigin: \"left top\"\n            }}\n            transition={{ \n              type: \"tween\", \n              ease: \"easeOut\",\n              duration: 0.15\n            }}\n            className={`\n              absolute mt-2 w-48 bg-white rounded-lg shadow-lg border border-zinc-200 z-10\n              ${poppins.className}\n            `}\n          >\n            <div className=\"py-1\">\n              {processedItems.map((item, index) => (\n                <motion.button\n                  key={index}\n                  initial={{ opacity: 0, y: -5 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ \n                    delay: index * 0.02,\n                    duration: 0.2,\n                    ease: \"easeOut\"\n                  }}\n                  className=\"w-full text-left px-4 py-2 text-zinc-700 hover:bg-zinc-50 hover:text-zinc-900 transition-colors duration-200 flex items-center\"\n                  onClick={() => {\n                    onItemSelect(item.label);\n                    setIsOpen(false);\n                  }}\n                >\n                  {item.icon && (\n                    <span className=\"mr-2 text-zinc-600 flex-shrink-0\">{item.icon}</span>\n                  )}\n                  <span>{item.label}</span>\n                </motion.button>\n              ))}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n} ",
  "src/components/animated-button/animated-button.tsx": "\"use client\";\n\nimport { useRef, useState, useEffect } from \"react\";\nimport { Poppins } from \"next/font/google\";\n\n// Initialize the Poppins font\nconst poppins = Poppins({\n  weight: ['400', '500', '600'],\n  subsets: ['latin'],\n  display: 'swap',\n});\n\n// Define anime.js types\ninterface AnimeInstance {\n  (params: object): { [key: string]: unknown };\n}\n\n// Add TypeScript interface for window to recognize anime\ndeclare global {\n  interface Window {\n    anime: AnimeInstance;\n  }\n}\n\ninterface AnimatedButtonProps {\n  defaultText: string;\n  hoverText: string;\n}\n\nexport function AnimatedButton({ \n  defaultText = \"Hover\", \n  hoverText = \"Click\" \n}: AnimatedButtonProps) {\n  const [isHovered, setIsHovered] = useState(false);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const rippleRef = useRef<HTMLDivElement | null>(null);\n  const reverseRippleRef = useRef<HTMLDivElement | null>(null);\n  const animeRef = useRef<AnimeInstance | null>(null);\n  \n  // Dynamically import anime.js to avoid server-side rendering issues\n  useEffect(() => {\n    // Using a more direct approach with global variable \n    const loadAnime = async () => {\n      try {\n        // We'll rely on the window-level import\n        const script = document.createElement('script');\n        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js';\n        script.async = true;\n        script.onload = () => {\n          animeRef.current = window.anime;\n        };\n        document.head.appendChild(script);\n      } catch (error) {\n        console.error(\"Failed to load anime.js:\", error);\n      }\n    };\n    \n    loadAnime();\n    \n    // Cleanup function\n    return () => {\n      const scriptElement = document.querySelector('script[src*=\"anime.min.js\"]');\n      if (scriptElement && scriptElement.parentNode) {\n        scriptElement.parentNode.removeChild(scriptElement);\n      }\n    };\n  }, []);\n  \n  const handleMouseEnter = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!buttonRef.current || !animeRef.current) return;\n    \n    // Get button dimensions and position\n    const buttonRect = buttonRef.current.getBoundingClientRect();\n    \n    // Calculate the position where mouse entered relative to the button\n    const x = e.clientX - buttonRect.left;\n    const y = e.clientY - buttonRect.top;\n    setMousePosition({ x, y });\n    \n    // Remove any existing reverse ripple\n    if (reverseRippleRef.current && reverseRippleRef.current.parentNode) {\n      reverseRippleRef.current.parentNode.removeChild(reverseRippleRef.current);\n      reverseRippleRef.current = null;\n    }\n    \n    // Create ripple element if it doesn't exist\n    if (!rippleRef.current) {\n      const ripple = document.createElement('div');\n      ripple.className = 'absolute rounded-full bg-pink-600 transform -translate-x-1/2 -translate-y-1/2 pointer-events-none';\n      buttonRef.current.appendChild(ripple);\n      rippleRef.current = ripple;\n    }\n    \n    // Position the ripple at mouse entry point\n    if (rippleRef.current) {\n      rippleRef.current.style.left = `${x}px`;\n      rippleRef.current.style.top = `${y}px`;\n      rippleRef.current.style.width = '0';\n      rippleRef.current.style.height = '0';\n      rippleRef.current.style.opacity = '0.8';\n      rippleRef.current.style.zIndex = '1';\n      \n      // Calculate diagonal distance from click to farthest corner\n      const topLeft = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n      const topRight = Math.sqrt(Math.pow(buttonRect.width - x, 2) + Math.pow(y, 2));\n      const bottomLeft = Math.sqrt(Math.pow(x, 2) + Math.pow(buttonRect.height - y, 2));\n      const bottomRight = Math.sqrt(Math.pow(buttonRect.width - x, 2) + Math.pow(buttonRect.height - y, 2));\n      \n      // Get the maximum dimension to ensure the ripple covers the entire button\n      const maxDimension = Math.max(\n        buttonRect.width * 2,\n        buttonRect.height * 2,\n        topLeft * 2,\n        topRight * 2,\n        bottomLeft * 2,\n        bottomRight * 2\n      );\n      \n      // Animate the ripple\n      animeRef.current({\n        targets: rippleRef.current,\n        width: maxDimension,\n        height: maxDimension,\n        opacity: 0.6,\n        easing: 'easeOutQuad',\n        duration: 600\n      });\n    }\n    \n    setIsHovered(true);\n  };\n  \n  const handleMouseLeave = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!buttonRef.current || !animeRef.current) return;\n    \n    // Get button dimensions and position\n    const buttonRect = buttonRef.current.getBoundingClientRect();\n    \n    // Calculate the position where mouse exited relative to the button\n    const x = e.clientX - buttonRect.left;\n    const y = e.clientY - buttonRect.top;\n    \n    // Create reverse ripple element\n    if (!reverseRippleRef.current) {\n      const reverseRipple = document.createElement('div');\n      reverseRipple.className = 'absolute rounded-full bg-zinc-800 transform -translate-x-1/2 -translate-y-1/2 pointer-events-none';\n      reverseRipple.style.zIndex = '2';\n      buttonRef.current.appendChild(reverseRipple);\n      reverseRippleRef.current = reverseRipple;\n    }\n    \n    // Position the reverse ripple at mouse exit point\n    if (reverseRippleRef.current) {\n      reverseRippleRef.current.style.left = `${x}px`;\n      reverseRippleRef.current.style.top = `${y}px`;\n      reverseRippleRef.current.style.width = '0';\n      reverseRippleRef.current.style.height = '0';\n      reverseRippleRef.current.style.opacity = '0.9';\n      \n      // Calculate diagonal distance from exit point to farthest corner\n      const topLeft = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n      const topRight = Math.sqrt(Math.pow(buttonRect.width - x, 2) + Math.pow(y, 2));\n      const bottomLeft = Math.sqrt(Math.pow(x, 2) + Math.pow(buttonRect.height - y, 2));\n      const bottomRight = Math.sqrt(Math.pow(buttonRect.width - x, 2) + Math.pow(buttonRect.height - y, 2));\n      \n      // Get the maximum dimension to ensure the ripple covers the entire button\n      const maxDimension = Math.max(\n        buttonRect.width * 2,\n        buttonRect.height * 2,\n        topLeft * 2,\n        topRight * 2,\n        bottomLeft * 2,\n        bottomRight * 2\n      );\n      \n      // Animate the reverse ripple\n      animeRef.current({\n        targets: reverseRippleRef.current,\n        width: maxDimension,\n        height: maxDimension,\n        opacity: 0.95,\n        easing: 'easeOutQuad',\n        duration: 600,\n        complete: () => {\n          // Clean up the green ripple if it exists\n          if (rippleRef.current && rippleRef.current.parentNode) {\n            rippleRef.current.parentNode.removeChild(rippleRef.current);\n            rippleRef.current = null;\n          }\n        }\n      });\n    }\n    \n    setIsHovered(false);\n  };\n\n  // Calculate the total duration for the first text to slide out\n  const totalPaymentSlideDuration = (defaultText.length - 1) * 30;\n\n  return (\n    <button\n      ref={buttonRef}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      className={`\n        px-4 py-2 rounded-xl font-medium bg-zinc-800 text-white shadow-md \n        relative overflow-hidden w-32 h-14 cursor-pointer transition-all duration-300\n        ${isHovered ? 'shadow-xl translate-y-[-2px]' : ''}\n        ${poppins.className}\n      `}\n    >\n      <div className=\"relative overflow-hidden w-full h-full z-10\">\n        <div className=\"absolute inset-0 flex items-center justify-center w-full\">\n          <div className=\"flex text-md font-medium\">\n            {defaultText.split('').map((char, index) => (\n              <span\n                key={`payment-${index}`}\n                className={`\n                  transform transition-all duration-300 ease-in-out\n                  ${isHovered \n                    ? `opacity-0 translate-y-[-8px] delay-[${index * 30}ms]` \n                    : `opacity-100 translate-y-0 delay-[${(hoverText.length + 2) * 30 + index * 30}ms]`\n                  }\n                `}\n                style={{\n                  transitionDelay: isHovered ? `${index * 30}ms` : `${(hoverText.length + 2) * 30 + (defaultText.length - index - 1) * 30}ms`\n                }}\n              >\n                {char === ' ' ? '\\u00A0' : char}\n              </span>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"absolute inset-0 flex items-center justify-center w-full\">\n          <div className=\"flex text-md font-medium\">\n            {hoverText.split('').map((char, index) => (\n              <span\n                key={`start-${index}`}\n                className={`\n                  transform transition-all duration-300 ease-in-out\n                  ${isHovered \n                    ? `opacity-100 translate-y-0` \n                    : `opacity-0 translate-y-[8px]`\n                  }\n                `}\n                style={{\n                  transitionDelay: isHovered \n                    ? `${totalPaymentSlideDuration + index * 30}ms` \n                    : `${index * 30}ms`\n                }}\n              >\n                {char}\n              </span>\n            ))}\n          </div>\n        </div>\n      </div>\n    </button>\n  );\n} ",
  "src/components/asset-counter/asset-counter.tsx": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { ChevronLeft, ChevronRight, Heart, Trash2, ChevronDown } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport NumberFlow from '@number-flow/react';\nimport { Dropdown } from '../dropdown/dropdown';\n\n// Common animation settings for NumberFlow components\nconst numberFlowAnimation = {\n  transformTiming: {\n    duration: 400,\n    easing: 'cubic-bezier(0.34, 1.56, 0.64, 1)'\n  },\n  opacityTiming: {\n    duration: 200,\n    easing: 'ease-out'\n  }\n};\n\n// Custom styled dropdown for AssetCounter\nfunction AssetCounterDropdown({\n  items,\n  onItemSelect\n}: {\n  items: string[];\n  onItemSelect: (item: string) => void;\n}) {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  const handleItemClick = (item: string) => {\n    onItemSelect(item);\n    setIsOpen(false);\n  };\n  \n  return (\n    <div className=\"relative\">\n      <motion.button \n        onClick={() => setIsOpen(!isOpen)}\n        className=\"flex items-center rounded-md bg-zinc-800 text-white pr-3 cursor-pointer\"\n        aria-label=\"More options\"\n        whileHover={{ backgroundColor: '#3f3f46' }}\n        whileTap={{ scale: 0.95 }}\n        transition={{ duration: 0.2 }}\n      >\n        {/* Icon container */}\n        <div className=\"flex-shrink-0 w-8 h-8 flex items-center justify-center\">\n          <motion.div\n            animate={{ rotate: isOpen ? 180 : 0 }}\n            whileHover={{ rotate: isOpen ? 180 : -180 }}\n            transition={{ duration: 0.3 }}\n          >\n            <ChevronDown \n              size={18} \n              className=\"text-white\" \n            />\n          </motion.div>\n        </div>\n        \n        <span className=\"text-xs font-medium whitespace-nowrap\">\n          Move to collection\n        </span>\n      </motion.button>\n      \n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ \n              opacity: 0, \n              scale: 0.5,\n              transformOrigin: \"left top\"\n            }}\n            animate={{ \n              opacity: 1, \n              scale: 1,\n              transformOrigin: \"left top\"\n            }}\n            exit={{ \n              opacity: 0, \n              scale: 0.5,\n              transformOrigin: \"left top\"\n            }}\n            transition={{ \n              type: \"tween\", \n              ease: \"easeOut\",\n              duration: 0.15\n            }}\n            className=\"absolute mt-2 w-48 bg-white rounded-lg shadow-lg border border-zinc-200 z-10\"\n          >\n            <div className=\"py-1\">\n              {items.map((item, index) => (\n                <motion.button\n                  key={index}\n                  initial={{ opacity: 0, y: -5 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ \n                    delay: index * 0.02,\n                    duration: 0.2,\n                    ease: \"easeOut\"\n                  }}\n                  className=\"w-full text-left px-4 py-2 text-zinc-700 hover:bg-zinc-50 hover:text-zinc-900 transition-colors duration-200 flex items-center\"\n                  onClick={() => handleItemClick(item)}\n                >\n                  <span>{item}</span>\n                </motion.button>\n              ))}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\ninterface AssetCounterProps {\n  total: number;\n  initialIndex?: number;\n  onIndexChange?: (index: number) => void;\n  onFavorite?: (index: number) => void;\n  onTrash?: (index: number) => void;\n  onDropdown?: (item: string) => void;\n  favorites?: number[];\n  trashed?: number[];\n}\n\nexport function AssetCounter({\n  total,\n  initialIndex = 0,\n  onIndexChange,\n  onFavorite,\n  onTrash,\n  onDropdown = () => {},\n  favorites = [],\n  trashed = []\n}: AssetCounterProps) {\n  const [currentIndex, setCurrentIndex] = useState(initialIndex);\n  \n  // Update internal state when initialIndex prop changes\n  useEffect(() => {\n    setCurrentIndex(initialIndex);\n  }, [initialIndex]);\n  \n  const handlePrevious = () => {\n    const newIndex = currentIndex <= 0 ? total - 1 : currentIndex - 1;\n    setCurrentIndex(newIndex);\n    if (onIndexChange) onIndexChange(newIndex);\n  };\n  \n  const handleNext = () => {\n    const newIndex = currentIndex >= total - 1 ? 0 : currentIndex + 1;\n    setCurrentIndex(newIndex);\n    if (onIndexChange) onIndexChange(newIndex);\n  };\n  \n  const handleFavorite = () => {\n    if (onFavorite) onFavorite(currentIndex);\n  };\n  \n  const handleTrash = () => {\n    if (onTrash) onTrash(currentIndex);\n  };\n  \n  const handleDropdownSelect = (item: string) => {\n    if (onDropdown) onDropdown(item);\n  };\n  \n  // Check if current item is favorited or trashed\n  const isCurrentFavorite = favorites.includes(currentIndex);\n  const isCurrentTrashed = trashed.includes(currentIndex);\n  \n  // Define dropdown items\n  const dropdownItems = ['Collection 1', 'Collection 2', 'Collection 3', 'New Collection'];\n  \n  // Don't render if there are no assets\n  if (total <= 0) return null;\n  \n  return (\n    <motion.div \n      className=\"flex items-center justify-center bg-white border border-zinc-100 rounded-lg px-1 py-1 shadow-lg\"\n      initial={{ opacity: 0, y: 0 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.4, ease: [0.25, 1, 0.5, 1] }}\n    >\n      {/* Navigation controls */}\n      <div className=\"flex items-center\">\n        <motion.button \n          onClick={handlePrevious}\n          className=\"p-1 rounded-lg\"\n          aria-label=\"Previous asset\"\n          whileTap={{ scale: 0.9 }}\n          whileHover={{ textDecorationColor: 'rgb(63 63 71)' }}\n        >\n          <ChevronLeft size={20} className=\"text-zinc-400 hover:text-zinc-700 transition-colors duration-200 cursor-pointer\" />\n        </motion.button>\n        \n        <div className=\"min-w-[32px] text-center\">\n          <span className=\"text-md font-medium text-zinc-800\">\n            <NumberFlow \n              value={currentIndex + 1}\n              willChange\n              format={{ useGrouping: false }}\n              transformTiming={numberFlowAnimation.transformTiming}\n              opacityTiming={numberFlowAnimation.opacityTiming}\n            />\n            <span>/</span>\n            <NumberFlow \n              value={total}\n              willChange={false}\n              format={{ useGrouping: false }}\n            />\n          </span>\n        </div>\n        \n        <motion.button \n          onClick={handleNext}\n          className=\"p-1 rounded-lg\"\n          aria-label=\"Next asset\"\n          whileTap={{ scale: 0.9 }}\n          whileHover={{ textDecorationColor: 'rgb(63 63 71)'}}\n        >\n          <ChevronRight size={20} className=\"text-zinc-400 hover:text-zinc-700 transition-colors duration-200 cursor-pointer\" />\n        </motion.button>\n      </div>\n      \n      {/* Divider */}\n      <motion.div \n        className=\"h-6 w-px ml-2 mr-4 bg-zinc-200\"\n        initial={{ height: 0 }}\n        animate={{ height: 24 }}\n        transition={{ duration: 0.3, delay: 0.1 }}\n      />\n      \n      {/* Action buttons */}\n      <div className=\"flex items-center space-x-2\">\n        {/* Favorite button with expanding text */}\n        <motion.button \n          onClick={handleFavorite}\n          className={`\n            group flex items-center overflow-hidden rounded-md cursor-pointer\n            ${isCurrentFavorite \n              ? 'bg-green-500 text-white' \n              : 'bg-green-100 text-green-600'\n            }\n          `}\n          aria-label={isCurrentFavorite ? \"Remove from favorites\" : \"Add to favorite\"}\n          whileHover={{ \n            width: 'auto',\n            paddingRight: 12,\n            backgroundColor: isCurrentFavorite ? '#16a34a' : '#16a34a',\n            color: 'white'\n          }}\n          initial={{ width: 32 }}\n          animate={{ \n            backgroundColor: isCurrentFavorite ? '#16a34a' : '#dcfce7',\n            transition: { duration: 0.2 }\n          }}\n          whileTap={{ scale: 0.95 }}\n          transition={{ \n            type: \"tween\",\n            ease: \"easeIn\",\n            duration: 0.2,\n            exit: {\n              ease: \"easeOut\",\n              duration: 0.2\n            },\n            \n          }}\n        >\n          {/* Square icon container */}\n          <div className=\"flex-shrink-0 w-8 h-8 flex items-center justify-center cursor-pointer\">\n            <motion.div\n              animate={isCurrentFavorite ? { scale: [1, 1.3, 1] } : { scale: 1 }}\n              transition={{ duration: 0.3 }}\n            >\n              <Heart \n                size={18} \n                className={`\n                  transition-colors duration-200\n                  ${isCurrentFavorite ? 'text-white fill-white' : 'group-hover:text-white'} \n                `} \n              />\n            </motion.div>\n          </div>\n          \n          <span className=\"whitespace-nowrap overflow-hidden max-w-0 group-hover:max-w-[120px] transition-all duration-300 opacity-0 group-hover:opacity-100 text-xs font-medium\">\n            {isCurrentFavorite ? 'Favorited' : 'Favorite'}\n          </span>\n        </motion.button>\n        \n        {/* Trash button with expanding text */}\n        <motion.button \n          onClick={handleTrash}\n          className={`\n            group flex items-center overflow-hidden rounded-md cursor-pointer\n            ${isCurrentTrashed \n              ? 'bg-red-500 text-white opacity-80' \n              : 'bg-red-100 text-red-600'\n            }\n          `}\n          aria-label={isCurrentTrashed ? \"Already in trash\" : \"Move to trash\"}\n          disabled={isCurrentTrashed}\n          whileHover={{ \n            width: 'auto',\n            paddingRight: 12,\n            backgroundColor: isCurrentTrashed ? '#ef4444' : '#ef4444',\n            color: 'white'\n          }}\n          initial={{ width: 32 }}\n          animate={{ \n            backgroundColor: isCurrentTrashed ? '#ef4444' : '#fee2e2',\n            transition: { duration: 0.2 }\n          }}\n          whileTap={{ scale: 0.95 }}\n          transition={{ \n            type: \"tween\",\n            ease: \"easeIn\",\n            duration: 0.2,\n            exit: {\n              ease: \"easeOut\",\n              duration: 0.15\n\n            },\n          }}\n        >\n          {/* Square icon container */}\n          <div className=\"flex-shrink-0 w-8 h-8 flex items-center justify-center cursor-pointer\">\n            <Trash2 \n              size={18} \n              className={`\n                transition-colors duration-200\n                ${isCurrentTrashed ? 'text-white' : 'group-hover:text-white'} \n              `} \n            />\n          </div>\n          \n          <span className=\"whitespace-nowrap overflow-hidden max-w-0 group-hover:max-w-[120px] transition-all duration-300 opacity-0 group-hover:opacity-100 text-xs font-medium\">\n            {isCurrentTrashed ? 'Trashed' : 'Move to trash'}\n          </span>\n        </motion.button>\n        \n        {/* Divider */}\n      <motion.div \n        className=\"h-6 w-px ml-2 mr-4 bg-zinc-200\"\n        initial={{ height: 0 }}\n        animate={{ height: 24 }}\n        transition={{ duration: 0.3, delay: 0.1 }}\n      />\n\n        {/* Custom styled dropdown */}\n        <AssetCounterDropdown\n          items={dropdownItems}\n          onItemSelect={handleDropdownSelect}\n        />\n      </div>\n    </motion.div>\n  );\n} ",
  "src/components/text-highlight/text-highlight.tsx": "'use client';\n\nimport { useEffect, useRef } from 'react';\n\n// Add GSAP types to window\ndeclare global {\n  interface Window {\n    gsap: any;\n    ScrollTrigger: any;\n  }\n}\n\nexport function TextHighlight() {\n  const articleRef = useRef<HTMLDivElement>(null);\n  const highlightRefs = useRef<HTMLSpanElement[]>([]);\n  const gsapRef = useRef<any>(null);\n\n  // Define highlight colors\n  const highlightColors = [\n    '#1BFC06', // Bright green\n    '#FF3366', // Pink/red\n    '#00CCFF'  // Bright blue\n  ];\n\n  // Load GSAP dynamically\n  useEffect(() => {\n    const loadGSAP = async () => {\n      try {\n        // Load GSAP core\n        const gsapScript = document.createElement('script');\n        gsapScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js';\n        gsapScript.async = true;\n        \n        // Load ScrollTrigger plugin\n        const scrollTriggerScript = document.createElement('script');\n        scrollTriggerScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js';\n        scrollTriggerScript.async = true;\n        \n        // Make sure GSAP is loaded first\n        gsapScript.onload = () => {\n          document.head.appendChild(scrollTriggerScript);\n        };\n        \n        // Initialize animations after both are loaded\n        scrollTriggerScript.onload = () => {\n          // Store the GSAP reference\n          gsapRef.current = window.gsap;\n          \n          // Make content visible only after GSAP is loaded\n          document.getElementById('article-content')?.classList.remove('opacity-0');\n          \n          initAnimations();\n        };\n        \n        document.head.appendChild(gsapScript);\n      } catch (error) {\n        console.error(\"Failed to load GSAP:\", error);\n      }\n    };\n    \n    loadGSAP();\n    \n    return () => {\n      // Clean up scripts on unmount\n      const scripts = document.querySelectorAll('script[src*=\"gsap\"]');\n      scripts.forEach(script => {\n        if (script.parentNode) {\n          script.parentNode.removeChild(script);\n        }\n      });\n      \n      // Clean up any ScrollTrigger instances\n      if (window.ScrollTrigger) {\n        window.ScrollTrigger.getAll().forEach((trigger: any) => trigger.kill());\n      }\n    };\n  }, []);\n\n  // Initialize highlight animations once GSAP is loaded\n  const initAnimations = () => {\n    if (!gsapRef.current || !window.ScrollTrigger) return;\n    \n    const gsap = gsapRef.current;\n    const { ScrollTrigger } = window;\n    \n    // Register ScrollTrigger plugin\n    gsap.registerPlugin(ScrollTrigger);\n    \n    // Handle highlight animations\n    highlightRefs.current.forEach((highlight, index) => {\n      if (!highlight) return;\n      \n      // Choose color based on index (cycle through the colors)\n      const colorIndex = index % highlightColors.length;\n      const color = highlightColors[colorIndex];\n      \n      // Create a GSAP timeline for each highlight\n      const tl = gsap.timeline({\n        scrollTrigger: {\n          trigger: highlight,\n          start: \"top 70%\",\n          toggleActions: \"play none none reverse\"\n        }\n      });\n      \n      // Set initial state - create a gradient mask that hides the text\n      gsap.set(highlight, {\n        backgroundSize: \"0% 100%\",\n        backgroundPosition: \"0% 0%\",\n        backgroundImage: `linear-gradient(to right, ${color}, ${color})`\n      });\n      \n      // Animate the background size from left to right\n      tl.to(highlight, {\n        backgroundSize: \"100% 100%\",\n        duration: 1.5,\n        ease: \"power2.inOut\"\n      });\n    });\n  };\n\n  const addToHighlightRefs = (el: HTMLSpanElement | null, index: number) => {\n    if (el && !highlightRefs.current.includes(el)) {\n      highlightRefs.current[index] = el;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white py-48\">\n      <div className=\"max-w-xl mx-auto px-6\" ref={articleRef}>\n        {/* Content initially hidden until GSAP loads */}\n        <div id=\"article-content\" className=\"opacity-0 transition-opacity duration-300\">\n          <h1 className=\"text-4xl font-medium mb-8 text-zinc-800\">The Evolution of Web Animation</h1>\n          \n          <div className=\"text-zinc-600 leading-6 space-y-6 font-light\">\n            <p>\n              The history of web animation is a fascinating journey that spans several decades. From the early days of simple GIFs to today's complex interactive experiences, web animation has transformed the way we interact with content online.\n            </p>\n            \n            <h2 className=\"text-2xl font-light text-zinc-800 mt-8 mb-4\">The Early Days</h2>\n            \n            <p>\n              In the 1990s, web animation was in its infancy. <span ref={(el) => addToHighlightRefs(el, 0)} className=\"highlight-text\">Designers relied heavily on GIF files to add movement to websites. These simple animations were often flashy and distracting,</span> but they represented the first steps toward dynamic web experiences.\n            </p>\n            \n            <p>\n              As web technologies evolved, Flash emerged as the dominant platform for creating web animations. Adobe Flash allowed designers to create rich interactive experiences with relatively small file sizes, making it ideal for the limited bandwidth of the time.\n            </p>\n            \n            <h2 className=\"text-2xl font-light text-zinc-800 mt-8 mb-4\">The CSS Revolution</h2>\n            \n            <p>\n              The introduction of CSS3 marked a significant turning point for web animation. Suddenly, developers could create animations without relying on plugins or additional technologies. <span ref={(el) => addToHighlightRefs(el, 2)} className=\"highlight-text\">CSS transitions and keyframe animations opened up new possibilities for creating smooth, performance-optimized animations directly in the browser.</span>\n            </p>\n            \n            <p>\n              With the decline of Flash and the rise of mobile browsing, CSS animations became increasingly important. They were lightweight, fast, and worked across different devices and browsers.\n            </p>\n            \n            <h2 className=\"text-2xl font-light text-zinc-800 mt-8 mb-4\">JavaScript Animation Libraries</h2>\n            \n            <p>\n              While CSS animations were powerful, they had limitations. JavaScript libraries like GSAP, anime.js, and Motion filled the gap by <span ref={(el) => addToHighlightRefs(el, 3)} className=\"highlight-text\">providing developers with fine-grained control over animations</span> and complex sequencing capabilities.\n            </p>\n            \n            <p>\n              These libraries made it possible to create sophisticated animations that responded to user interactions and could be precisely timed and controlled. They abstracted away browser inconsistencies and provided a clean API for creating animations.\n            </p>\n            \n            <h2 className=\"text-2xl font-light text-zinc-800 mt-8 mb-4\">Modern Animation Techniques</h2>\n            \n            <p>\n              Today, web animation encompasses a wide range of techniques and approaches. From subtle micro-interactions to immersive 3D experiences, animation has become an essential part of user experience design.\n            </p>\n            \n            <p>\n              <span ref={(el) => addToHighlightRefs(el, 4)} className=\"highlight-text\">The integration of animation with scrolling has become particularly important</span>, allowing content to respond dynamically as users navigate through a page. This approach creates a sense of depth and engagement that static content cannot match.\n            </p>\n            \n            <h2 className=\"text-2xl font-light text-zinc-800 mt-8 mb-4\">The Future of Web Animation</h2>\n            \n            <p>\n              As web technologies continue to evolve, the possibilities for animation will only expand. WebGL and WebGPU are pushing the boundaries of what's possible, enabling complex 3D animations and immersive experiences that were once only possible in native applications.\n            </p>\n            \n            <p>\n              The future of web animation lies in creating experiences that are not just visually impressive but also meaningful and accessible. <span ref={(el) => addToHighlightRefs(el, 6)} className=\"highlight-text\">The best animations enhance content without overwhelming it, guiding users through digital experiences in intuitive and delightful ways.</span>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Add global styles\nconst globalStyles = `\n  .highlight-text {\n    background-repeat: no-repeat;\n    background-position: left;\n    background-size: 0% 100%;\n    display: inline;\n  }\n`;\n\n// Add style tag to document\nif (typeof document !== 'undefined') {\n  const styleTag = document.createElement('style');\n  styleTag.innerHTML = globalStyles;\n  document.head.appendChild(styleTag);\n} "
};
